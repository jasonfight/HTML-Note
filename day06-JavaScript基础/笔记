第一章  JavaScript简介
1.1 JavaScript简介
1  简介
   是一种嵌入在HTML网页中的脚本语言,由浏览器边解释边执行
HTML CSS JabaScript 的关系如下:  HTML 网页结构   CSS 网页外观   JacaScript 页面行为

2 特点
一 动态改变页面内容  弥补HTML页面编写后内容无法改变的不足
二 动态改变网页的外观  可通过修改CSS演示 达到动态改变网页的外观
三 验证表单数据   在网页中添加验证功能
四 响应事件

3 关于JavaScript
  是一门脚本语言, 由传统变成语言简化而来,特点为   不需要编译成二进制 以文本形式存在, 一般需要其他语言的调用执行,不能独立运行.(脚本语言的特点)

1.3  JavaScirpt  在HTML中的调用方式

一 页头引入  head标签内
二 野种引用  body 标签内
三 元素事件中引入(标签属性中引入)
四 引入外部JS文件


一 页头引入
  在head标签内引入,语法
<head>
<title></title>
<script type="text/javascript">
	javascript程序
	document.write("你好")
</script>
</head>


<script type="text/javascript">
</script>
为固定写法
document.write()  为输出一行字符

二 页中引入JS
<body>
	<script type="text/javascript">
		javascript程序
	</script>
</body>

三 元素事件中引入JS
在元素的某一个属性中,直接编写JavaScript程序或调用Javascript函数,这个属性指元素的"事件属性"
    直接编写javascript程序:
  	<body>
		<input type="button" onClick="alert('你好')" value="确定>
	</body>

	效果:在页面生成一个 名为 确定 的按钮  单击后 弹出   你好 的 对话框
  调用javascript函数
	<!DOCTYPE html>
	<head>
	<title></title>
	<script type="text/javascript">
	function a()
	{
	alert "你好"
	}
	</script>
	</head>
	<body>
	<input type="button" onclick="a()" value="确定">
	</body>
	效果:  在页面中生成一个名为 确定 的按钮,单击后弹出 对话框 你好
四 引入外部 JS文件

	讲JavaScript程序存放在一个扩展名为.js的文件中,然后使用script标签来引用,
引用外部js文件的script标签可以放在head标签内  也可以放在body 标签内

	语法:
	<script src="#" type="text/javascript"> </script>
1.4 JavaScript 与Java的关系
	JavaScript 最初受Java的启发二设计的,目的之一就是"看上去想Java".
因此,语法上有很多类似,许多名称和命名规则也借鉴Java,但是,实际上,JavaScript主要
设计原则院子Self和Scheme JavaScript 和Java 虽然名字相似,但是本质上不同
(1) JavaScript 往往在网页中使用,Java可以在软件 网页 手机App等领域中使用
(2) Java是一门面向对象的语言,JavaScript更像一门函数式的编程语言

=================================================================
第二章  Javascript 入门基础
2.1  JavaScript入门简介
(略)
2.2  JavaScript数据结构
一 标识符
标识符第一个字符必须是字母 下划线 或者美元符号 不能包含空格 加减号等 不能为关键字

二 关键字
有特定含义 是JavaScript 语法的字符串

三 常量
不能改变的量  从定义开始就是固定的,知道程序结束

四 变量
在程序运行过程中,可以改变其值的量
1 变量的命名
 第一个字符必须是字母 下划线 或者美元符号 不能包含空格 加减号等 不能为关键字
2 变量的声明与赋值
	声明 var 变量名;
	赋值: var 变量名=值1,值2...;
可以在声明变量的同时,给该变量命名
	eg:var name="jason",gender="male",age="24";
一个好的编程习惯:在代码的开始处,统一对需要的所有变量进行声明.
3 变量的作用域
作用域指该变量在程序中的有效范围,在JavaScript中  可分为 全局变量和局部变量
全局变量: 从定义开始,一直到该程序的结束,一直有效.
局部变量:在程序的函数中定义,在该函数中有效.

2.3 JavaScript的基本数据类型

弱数据类型,即一个数据不必首先做声明,可以在使用的时候在确定其数据类型.
JavaScript的数据类型有两大类  第一类  基本数据类型  第二类  特殊数据类型

基本数据类型:  数字型 number    字符串型  string   布尔型   boolean
特殊数据类型:  空值 null    未定义值 undefined  转义字符

一 数字型   number
1.整型数据
2.浮点型数据
二 字符串型 string
由Unicode字符  数字   标点符号 等组成的序列 用单引号或者双引号括起来
在单引号中出现单引号 和双引号内出现双引号时 内部的引号需要使用转移字符.
三 布尔型 boolean
	true 1    false 0
用于控制结构

eg:  1==1  的值 为 true或1
2.4 JavaScript 特殊数据类型

一 空值 null
表示其不存在,系统没有给其分配内存空间,  与"" 0 不相等
二 未定义值  undefined
  当声明了一个变量之后,却并没有给其赋值,此时其值为undefined
eg:  <head>
	<title>
	  <script type="text/javascript">
	     var name;
	     document.write(name);
	  </script>
	</title>
	</head>
输出结果为:undefined
三 转义字符
\b	退格
\n	回车换行
\t	Tab符号
\f	换页
\'	单引号
\"	双引号
\v	跳格(Tab,水平)
\r	换行
\\	反斜杠
\OOO	八进制整数
\xHH	十六进制整数
\uhhhh	十六进制编码的Unicode字符
2.5 运算符
一 算数运算
	+ - * / % ++ --
二 比较运算
< > <= >= == !=
三 赋值运算
= += -= *= /= %=
四 逻辑运算
 &&   ||   !
 五 条件运算
 语法:  条件? 表达式1:表达式2;      条件为真  执行表达式1  条件为假  执行表达式2
 2.6 typeof运算
 用于返回他的操作数当前所容纳的数据的类型,对于判断一个变量是否被定义过有用.
  eg:
  <head>
    <title></title>
    <script type="text/javascript">
        document.write(typeof(1)+ "<br/>");
        document.write(typeof("javascript")+ "<br/>");
        document.write(typeof(null)+ "<br/>");
        document.write(typeof(undefined)+ "<br/>");
    </script>
    </head>
    输出:
     number
     string
     object
     undefined
2.7 表达式

常见的表达式:
(1)赋值表达式 :    var a=4;   a+=4;
(2)算数表达式 :  算数运算符两边都是数值,a=1+1
(3)布尔表达式 :  判断  返回值为true 或者   false
(4)字符串表达式:  var a=123; var str='nihao'+a  ----> nihao123

2.8 类型转换

即将一种数据类型转换为另一种数据类型,
隐式类型转换: eg:  nihao+123    会自动将123转化为字符串  然后添加到 nihao 后面
显式类型转换: 为避免自动转换或不转换产生的不良后果
1 字符串类型转换为数值型
  parseInt()  字符--->整型
  parseFloat()  字符--->浮点型
注意:  将字符串转换为整形,前提该字符串必须是数值字符串  例如"123"
2 数值型转换为字符串型
  .toString()  数值--->字符串
  eg:
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml">
  <head>
      <title></title>
      <script type="text/javascript">
          var n=3.1415;
          var str=n.toString()+926;
          var num=n+926;
          document.write(str+"<br/>");
          document.write(num);
      </script>
  </head>
  <body>
  </body>
  </html>
输出结果为:
    3.1415926
    929.1415

2.9 JavaScript 基本语法

一 执行顺序
  按照出现顺序逐行执行,函数体内的代码,只有在调用函数时才开始执行.
二 区分大小写
三 分号和空格 JavaScript中  语句的分好  是可有可无的   eg:  var a=4   ====  var a=4;
这一点和其他语言不太一样.但是强烈建议每一句后加分号,这是一个重要的代码编写习惯
另外, JavaScript 会忽略多余的空格   添加空格的目的  是让写出来的代码  漂亮一些

2.10 JavaScript的注释

//  单行注释
/*  */  多行注释

=============================================================================

第三章  流程控制

3.1 基本处理流程

程序流程的三种基本结构    顺序结构  选择结构  循环结构

一 顺序结构
从上到下  从左到右 逐行进行
二 选择结构
  按照给定的逻辑条件来决定执行的顺序,有单向选择双向选择和多项选择之分,但是程序在执行
过程中,只执行其中一条分支.
三 循环结构
  根据代码的逻辑条件来判断是否重复执行某一段程序,若逻辑条件为true,则进入循环,若为false
则退出循环.

3.2 选择结构概述
(1) if语句
(2) if...else语句
(3) if...else if...语句
(4) if语句的嵌套
(5) switch语句
3.3 if 语句
一 if语句 单分支选择结构语句
    if 条件语句;
    {
      执行语句;
    }
二 if else 语句 双向分支选择结构语句
    if 条件语句
    {
        执行语句1;
    }
    else
    {
        执行语句2;
    }
  三 if...else if...语句
      if 条件语句;
    {
      执行语句1;
    }
    else if
    {
      执行语句2;
    }
    else
    {
      执行语句3;
    }
  四  if 语句的嵌套
    if 条件语句1;
    {
        if 条件语句2;
        {
          执行语句1;
          }
          else
          {
          执行语句2
          }
    }
    else
    {
        执行语句4
    }
  3.5 switch语句

    switch(表达式)
    {
        case 取值1;
          执行语句1;break;
        case 取值2;
          执行语句2;break;
        .....
        case 取值n;
          执行语句n;break;
        default:
          执行语句n+1;
    }
      default语句是可选的,当所有的case条件都不满足时,执行default后面的语句块.
  对于if语句和switch语句,判断条件较少时,使用if语句,对于判断条件较多时,使用switch语句
  3.6 循环结构概述
  (1) while语句
  (2) do...while语句
  (3) for 语句
  一 while语句

    while(条件表达式)
    {
      执行语句1
    }
  当条件表达式返回值为 true时  执行  为false时,跳出循环
  二  do...while 语句
    do
    {
      执行语句1;
    }
    while (条件表达式);
    do...while   先无条件执行一次循环,然后在判断是否再次执行,  while(条件表达式)后的分号不能省略
  三 for循环
    for(初始化表达式;循环条件表达式;循环后的操作表达式)
    {
      执行语句;
    }
  3.8 跳转语句
  (1)break语句  彻底结束一层循环或退出一个switch语句,
  (2)continue语句  结束本次循环,执行下一次循环,

  四 函数

4.1 函数是什么
    函数,就是一系列javascript语句的集合,  为了完成某一个会重复使用的特定功能,在需要该功能的时候
直接调用函数即可.
  (1)定义函数
  (2)调用函数
4.2  函数的定义
1. 不指定函数名的函数
  function(参数1,参数2,....参数n)
  {
      函数主体
  }
2. 指定函数名的函数
  function 函数名(参数1,参数2,...参数n)
  {
    函数主体;
    return 表达式;
  }
  形参和实参的区别:  定义函数时的参数为形参,调用函数时的参数为实参

  4.3 函数的调用
(1) 简单调用
(2) 在表达式中调用
(3) 在事件响应中调用
(4) 通过链接调用

一 简单调用
函数名(实参1,实参2,...实参n),是参数取决于形参数.
二  在表达式中应用
  在表达式中调用函数的方式,一般适用与有返回值的函数,然后函数的返回值参与表达式的计算,通常该方式会和
输出语句 document.write()  alert() 等 搭配使用.  在()中直接填写函数名与相关实参.
三 在事件响应中调用
  当事件发生时,JavaScript 就可以调用某个函数来针对这个事件做出响应.
  eg: <input type="button" onclick="函数名" value="提交">
    当单击名为 提交 的按钮时,调用该函数
四 通过链接调用
   eg:<a href="javascript:函数名">链接名称</a>
4.4 几种特殊的函数
(1) 嵌套函数
(2) 递归函数
(3) 内置函数
一 嵌套函数
二 递归函数
  function 递归函数名(参数1)
  {
      function 函数名(参数2)
  }
在定义递归函数时,需要2个必要条件:
(1) 首先包括一个结束递归的条件
(2) 其次包括一个递归调用的语句
五 内置函数
    内置函数,即JacaScript内部事先定义好的函数,使用时,直接调用就可以.
    常用内置函数:
    (1) eval()函数
    (2) isFinite(函数)
    (3) isNaN函数
    (4) parseInt函数
    (5) parseFloat函数
    (6) escape()函数
    (7) unescape()函数
1.eval()函数:
  语法: eval(string)
  说明: string表示一个字符串,是必选参数.eval()函数有返回值,如果参数字符串是一个表达式,就会返回表达式的值,如果不是表达式,则返回"undifined".不常使用.
2.isFinite()函数:
  简介:用来确定耨一个数是否是一个有限数值.
  语法:inFinite(number)
  说明:number参数必选,可以是任意的数值,包括整型和浮点型.如果参数为非数字 正负无穷数字,则返回false,否则,返回true.如果是字符串类型的数字,则自动转化为数字.
3.isNaN()函数
  简介:判断一个值是否为NaN值,如果该值为非数字值或NaN值,返回ture,否则返回false,  NaN:Not a Number (非数字值)
  语法:isNaN(参数)
  说明:该参数可以为任何类型的数据,不过,当参数为"字符串类型的数字"时,会自动转换为数字型.
4.parseInt()函数
  语法:parseInt(数字字符串)
  说明:将数字字符串转换为数字, 数字字符串后跟数字,则数字自动转为数字型字符串.
5.parseFloat()函数:
  语法:parseFloat(数字字符串)
  说明:将数字字符串转换为浮点型数字.
6.escape()函数
  escape(charstring)
  说明:charstring是必选参数,表示要进行编码的字符串或文字,f概述返回值为包含字符内容的字符串值(unicode格式),
  除了个别的"@"之类的符号,其余所有空格,标点符号以及其他非ASCII字符用"%xx"的形式的编码代替,其中xx等于该字符的十六进制数.
7.unescape()函数
  语法:unescape(charstring)
  将escape()函数解码
六 字符串对象
6.1 string
   length属性: 来获取字符串的长度
	语法: 字符串名.length
6.2 match() 方法简介
   语法:stringObject.match(字符串):   //匹配字符串
   语法:stringObject.match(正则表达式):  //匹配正则表达式
   说明:stringObject指的是字符串对象,match()返回指定的值,
6.3 search()方法
   语法:stringObject.search(字符串):   //匹配字符串
   语法:stringObject.search(正则表达式)  //匹配正则表达式
